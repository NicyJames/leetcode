class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());  // Sort the array
        int closest_sum = INT_MAX / 2;   // Initialize closest_sum with a large value
        
        // Traverse through the array
        for (int i = 0; i < nums.size() - 2; ++i) {
            int left = i + 1, right = nums.size() - 1;  // Two pointers approach
            
            // While the left pointer is less than the right pointer
            while (left < right) {
                int current_sum = nums[i] + nums[left] + nums[right];  // Sum of three elements
                
                // Update closest_sum if the current sum is closer to the target
                if (abs(current_sum - target) < abs(closest_sum - target)) {
                    closest_sum = current_sum;
                }
                
                // Adjust pointers based on the comparison between current_sum and target
                if (current_sum < target) {
                    ++left;  // Increase sum by moving left pointer to the right
                } else if (current_sum > target) {
                    --right;  // Decrease sum by moving right pointer to the left
                } else {
                    return current_sum;  // Exact match found, return immediately
                }
            }
        }
        
        return closest_sum;  // Return the closest sum found
    }
};
